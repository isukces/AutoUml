@startuml
title
 Diagram Test13
end title

class AttributesListOwner
{
}
class AttributesList
{
    +int Capacity
    +int Count
    +void Add(AttributesListItem item)
    +void AddRange(IEnumerable<AttributesListItem> collection)
    +ReadOnlyCollection<AttributesListItem> AsReadOnly()
    +int BinarySearch(int index,int count,AttributesListItem item,IComparer<AttributesListItem> comparer)
    +int BinarySearch(AttributesListItem item)
    +int BinarySearch(AttributesListItem item,IComparer<AttributesListItem> comparer)
    +void Clear()
    +bool Contains(AttributesListItem item)
    +List<TOutput> ConvertAll(Converter<AttributesListItem,TOutput> converter)
    +void CopyTo(AttributesListItem[] array)
    +void CopyTo(int index,AttributesListItem[] array,int arrayIndex,int count)
    +void CopyTo(AttributesListItem[] array,int arrayIndex)
    +int EnsureCapacity(int capacity)
    #void Grow(int capacity)
    +bool Exists(Predicate<AttributesListItem> match)
    +AttributesListItem Find(Predicate<AttributesListItem> match)
    +List<AttributesListItem> FindAll(Predicate<AttributesListItem> match)
    +int FindIndex(Predicate<AttributesListItem> match)
    +int FindIndex(int startIndex,Predicate<AttributesListItem> match)
    +int FindIndex(int startIndex,int count,Predicate<AttributesListItem> match)
    +AttributesListItem FindLast(Predicate<AttributesListItem> match)
    +int FindLastIndex(Predicate<AttributesListItem> match)
    +int FindLastIndex(int startIndex,Predicate<AttributesListItem> match)
    +int FindLastIndex(int startIndex,int count,Predicate<AttributesListItem> match)
    +void ForEach(Action<AttributesListItem> action)
    +Enumerator<AttributesListItem> GetEnumerator()
    +List<AttributesListItem> GetRange(int index,int count)
    +List<AttributesListItem> Slice(int start,int length)
    +int IndexOf(AttributesListItem item)
    +int IndexOf(AttributesListItem item,int index)
    +int IndexOf(AttributesListItem item,int index,int count)
    +void Insert(int index,AttributesListItem item)
    +void InsertRange(int index,IEnumerable<AttributesListItem> collection)
    +int LastIndexOf(AttributesListItem item)
    +int LastIndexOf(AttributesListItem item,int index)
    +int LastIndexOf(AttributesListItem item,int index,int count)
    +bool Remove(AttributesListItem item)
    +int RemoveAll(Predicate<AttributesListItem> match)
    +void RemoveAt(int index)
    +void RemoveRange(int index,int count)
    +void Reverse()
    +void Reverse(int index,int count)
    +void Sort()
    +void Sort(IComparer<AttributesListItem> comparer)
    +void Sort(int index,int count,IComparer<AttributesListItem> comparer)
    +void Sort(Comparison<AttributesListItem> comparison)
    +AttributesListItem[] ToArray()
    +void TrimExcess()
    +bool TrueForAll(Predicate<AttributesListItem> match)
}
class AttributesListItem
{
    +string Name
}

AttributesListOwner --{ AttributesListItem:Attributes
AttributesListOwner o--> AttributesList:Attributes2
AttributesList --> AttributesListItem:Item
@enduml
